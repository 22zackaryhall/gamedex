// Equivalent to calling --continue from the command line.
// Will run all tests and produce a report of all failed tests at the end.
gradle.startParameter.continueOnFailure = true

buildscript {
    ext {
        appVersion = '0.1.0'
        javaMaxHeap = '3g'

        ktlin = [:].with {
            v = '1.2.71'
            majorV = '1.2'
            std = [group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: v]
            reflect = [group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: v]
            gradle = [group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: v]
//            dokka = [group: 'org.jetbrains.dokka', name: 'dokka-gradle-plugin', version: '0.9.15']
            delegate
        }

        coroutines = [:].with {
            v = '0.30.2'
            core = [group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: v]
            javaFx = [group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-javafx', version: v]
            delegate
        }

        guice = [group: 'com.google.inject', name: 'guice', version: '4.2.1']
        reflections = [group: 'org.reflections', name: 'reflections', version: '0.9.11']

        slf4j = [:].with {
            v = '1.7.25'
            api = [group: 'org.slf4j', name: 'slf4j-api', version: v]
            julBridge = [group: 'org.slf4j', name: 'jul-to-slf4j', version: v]
            delegate
        }
        logback = [group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3']

        typesafeConfig = [group: 'com.typesafe', name: 'config', version: '1.3.3']
        config4k = [group: 'io.github.config4k', name: 'config4k', version: '0.4.0']

        guava = [group: 'com.google.guava', name: 'guava', version: '26.0-jre']

        jodaTime = [group: 'joda-time', name: 'joda-time', version: '2.10']

        khttp = [group: 'com.github.jkcclemens', name: 'khttp', version: 'master-SNAPSHOT']

        jackson = [:].with {
            v = '2.9.7'
            core = [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: v]
            kotlin = [group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: v]
            joda = [group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: v]
            delegate
        }

        h2 = [group: 'com.h2database', name: 'h2', version: '1.4.196']
        exposed = [group: 'org.jetbrains.exposed', name: 'exposed', version: '0.10.5']

        controlsFx = [group: 'org.controlsfx', name: 'controlsfx', version: '8.40.14']
        jFoenix = [group: 'com.jfoenix', name: 'jfoenix', version: '8.0.6']
        tornadoFx = [:].with {
            core = [group: 'no.tornado', name: 'tornadofx', version: '1.7.17']
            controls = [group: 'no.tornado', name: 'tornadofx-controls', version: '1.0.6']
            delegate
        }
//        bootstrapFx = [group: 'org.kordamp.bootstrapfx', name: 'bootstrapfx-core', version: '0.2.2']

        diff = [group: 'com.googlecode.java-diff-utils', name: 'diffutils', version: '1.3.0']

        kotlinTest = [group: 'io.kotlintest', name: 'kotlintest', version: '2.0.7']
        junit = [group: 'junit', name: 'junit', version: '4.12']
        mockito = [:].with {
            core = [group: 'org.mockito', name: 'mockito-all', version: '1.10.19']
            kotlin = [group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.6.0']
            delegate
        }

        ktor = [:].with {
            v = '0.9.5'
            core = [group: 'io.ktor', name: 'ktor-server-core', version: v]
            netty = [group: 'io.ktor', name: 'ktor-server-netty', version: v]
            delegate
        }
        wiremock = [group: 'com.github.tomakehurst', name: 'wiremock', version: '2.19.0']

        gradleJavaFx = [group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2']
        gradleVersions = [group: 'com.github.ben-manes', name: 'gradle-versions-plugin', version: '0.20.0']
        gradleLicense = [group: 'gradle.plugin.nl.javadude.gradle.plugins', name: 'license-gradle-plugin', version: '0.14.0']
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath ktlin.gradle
//        classpath ktlin.dokka
        classpath gradleJavaFx
        classpath gradleVersions
        classpath gradleLicense
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.ben-manes.versions'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group 'com.gitlab.ykrasik'
    version appVersion

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "http://dl.bintray.com/kotlin/exposed" }
        maven { url "http://dl.bintray.com/kotlin/ktor" }
    }
}

subprojects {
    apply plugin: 'kotlin'
//    apply plugin: 'org.jetbrains.dokka'
    apply gradleFile('test.gradle')
    apply gradleFile('license.gradle')

    dependencies {
        compile ktlin.std
        compile ktlin.reflect
        compile coroutines.core

        compile slf4j.api

        compile guice

        testCompile junit
        testCompile kotlinTest
        testCompile mockito.core
        testCompile mockito.kotlin
    }

//    dokka {
//        outputFormat = 'javadoc'
//        outputDirectory = "$buildDir/javadoc"
//        processConfigurations = ['compile']
//    }

    compileKotlin {
        kotlinOptions.jvmTarget = '1.8'
        kotlinOptions.apiVersion = ktlin.majorV
        kotlinOptions.languageVersion = ktlin.majorV
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = '1.8'
        kotlinOptions.apiVersion = ktlin.majorV
        kotlinOptions.languageVersion = ktlin.majorV
    }
    kotlin {
        experimental {
            coroutines 'enable'
        }
    }
}

project("gamedex-api") {
    dependencies {
        compile typesafeConfig
        compile config4k

        compile guava

        compile jodaTime

        compile(khttp) {
            exclude module: 'spek-api'
            exclude module: 'spek-junit-platform-engine'
        }

        compile jackson.core
        compile jackson.kotlin
        compile jackson.joda

        testCompile wiremock
        testCompile ktor.core
        testCompile ktor.netty
        testCompile reflections
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task testSourcesJar(type: Jar, dependsOn: classes) {
        appendix 'testkit'
        classifier 'sources'
        from sourceSets.test.allSource
        exclude '**/*.jpg'
        exclude '**/words.txt'
        exclude '**/genres.txt'
    }

    publishing {
        publications {
            main(MavenPublication) {
                from components.java
                artifact sourcesJar
            }
            test(MavenPublication) {
                artifactId 'gamedex-api-testkit'
                artifact testJar
                artifact testSourcesJar

                pom.withXml {
                    def dependencies = asNode().appendNode('dependencies')
                    configurations.testArtifacts.getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                        def dependency = dependencies.appendNode('dependency')
                        dependency.appendNode('groupId', it.moduleGroup)
                        dependency.appendNode('artifactId', it.moduleName)
                        dependency.appendNode('version', it.moduleVersion)
                    }
                }
            }
        }
    }
}

project("app:gamedex-app-api") {
    dependencies {
        fullDependency ":gamedex-api"
        compile diff
    }
}

// FIXME: Remove when all views have presenters
project("core:gamedex-core-api") {
    dependencies {
        fullDependency ":app:gamedex-app-api"
    }
}

project("core:gamedex-core-common") {
    dependencies {
        fullDependency ":core:gamedex-core-api"
    }
}

project("core:gamedex-core-persistence") {
    dependencies {
        fullDependency ":gamedex-api"
        compile h2
        compile exposed
    }
}

project("core:gamedex-core-game") {
    dependencies {
        fullDependency ":core:gamedex-core-common"
        fullDependency ":core:gamedex-core-persistence"
    }
}

project("core:gamedex-core-library") {
    dependencies {
        fullDependency ":core:gamedex-core-common"
        fullDependency ":core:gamedex-core-persistence"
    }
}

project("core:gamedex-core-report") {
    dependencies {
        fullDependency ":core:gamedex-core-common"
    }
}

project("core:gamedex-core") {
    dependencies {
        fullDependency ":core:gamedex-core-common"
        fullDependency ":core:gamedex-core-library"
        fullDependency ":core:gamedex-core-game"
        fullDependency ":core:gamedex-core-report"
        compile project(":core:gamedex-core-persistence")

        compile slf4j.julBridge
        compile logback

        compile reflections
    }
}

project("app:javafx:gamedex-javafx-common") {
    dependencies {
        fullDependency ":gamedex-api"
        compile project(":core:gamedex-core")   // FIXME: Remove when all views have presenters

        compile controlsFx
        compile jFoenix
        compile tornadoFx.core
        compile tornadoFx.controls

        compile coroutines.javaFx
    }
}

project("app:javafx:gamedex-javafx-view") {
    dependencies {
        fullDependency ":app:javafx:gamedex-javafx-common"
        compile project(":app:gamedex-app-api")
    }
}

project("provider") {
    subprojects.each {
        it.fullDependency ":gamedex-api"
    }
}

def gradleFile(String fileName) { [from: file("gradle/$fileName")] }

// Easier to remember alias
task versions(dependsOn: dependencyUpdates)