// Equivalent to calling --continue from the command line.
// Will run all tests and produce a report of all failed tests at the end.
gradle.startParameter.continueOnFailure = true

buildscript {
    ext {
        appVersion = '0.1.0'
        javaMaxHeap = '3g'

        kotlin_version = '1.2.30'
        ktlin = [:].with {
            v = '1.2.30'
            majorV = '1.2'
            couroutinesVersion = '0.22.3'
            std = [group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: v]
            reflect = [group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: v]
            gradle = [group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: v]
//            dokka = [group: 'org.jetbrains.dokka', name: 'dokka-gradle-plugin', version: '0.9.15']
            coroutinesCore = [group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: couroutinesVersion]
            coroutinesJavaFx = [group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-javafx', version: couroutinesVersion]
            delegate
        }

        guice = [group: 'com.google.inject', name: 'guice', version: '4.2.0']
        reflections = [group: 'org.reflections', name: 'reflections', version: '0.9.11']

        slf4j = [:].with {
            v = '1.7.25'
            api = [group: 'org.slf4j', name: 'slf4j-api', version: v]
            julBridge = [group: 'org.slf4j', name: 'jul-to-slf4j', version: v]
            delegate
        }
        logback = [group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3']

        typesafeConfig = [group: 'com.typesafe', name: 'config', version: '1.3.3']
        config4k = [group: 'io.github.config4k', name: 'config4k', version: '0.3.3']

        guava = [group: 'com.google.guava', name: 'guava', version: '24.0-jre']

        jodaTime = [group: 'joda-time', name: 'joda-time', version: '2.9.9']

        khttp = [group: 'com.github.jkcclemens', name: 'khttp', version: 'master-SNAPSHOT']

        jackson = [:].with {
            v = '2.9.1'
            core = [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: v]
            kotlin = [group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: v]
            joda = [group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: v]
            delegate
        }

        h2 = [group: 'com.h2database', name: 'h2', version: '1.4.196']
        exposed = [group: 'org.jetbrains.exposed', name: 'exposed', version: '0.10.1']

        controlsFx = [group: 'org.controlsfx', name: 'controlsfx', version: '8.40.14']
        jFoenix = [group: 'com.jfoenix', name: 'jfoenix', version: '8.0.2']
        tornadoFx = [:].with {
            core = [group: 'no.tornado', name: 'tornadofx', version: '1.7.15']
            controls = [group: 'no.tornado', name: 'tornadofx-controls', version: '1.0.6']
            delegate
        }

        diff = [group: 'com.googlecode.java-diff-utils', name: 'diffutils', version: '1.3.0']

        kotlinTest = [group: 'io.kotlintest', name: 'kotlintest', version: '2.0.7']
        junit = [group: 'junit', name: 'junit', version: '4.12']
        mockito = [:].with {
            core = [group: 'org.mockito', name: 'mockito-all', version: '1.10.19']
            kotlin = [group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.5.0']
            delegate
        }

        ktor = [:].with {
            v = '0.9.1'
            core = [group: 'io.ktor', name: 'ktor-server-core', version: v]
            netty = [group: 'io.ktor', name: 'ktor-server-netty', version: v]
            delegate
        }
        wiremock = [group: 'com.github.tomakehurst', name: 'wiremock', version: '2.15.0']

        gradleJavaFx = [group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2']
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath ktlin.gradle
//        classpath ktlin.dokka
        classpath gradleJavaFx
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group 'com.gitlab.ykrasik'
    version appVersion

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "http://dl.bintray.com/kotlin/exposed" }
        maven { url "http://dl.bintray.com/kotlin/ktor" }
    }
}

subprojects {
    apply plugin: 'kotlin'
//    apply plugin: 'org.jetbrains.dokka'
    apply gradleFile('test.gradle')

    dependencies {
        compile ktlin.std
        compile ktlin.reflect
        compile ktlin.coroutinesCore
        compile ktlin.coroutinesJavaFx

        compile slf4j.api

        compile guice

        testCompile junit
        testCompile kotlinTest
        testCompile mockito.core
        testCompile mockito.kotlin
    }

//    dokka {
//        outputFormat = 'javadoc'
//        outputDirectory = "$buildDir/javadoc"
//        processConfigurations = ['compile']
//    }

    compileKotlin {
        kotlinOptions.jvmTarget = '1.8'
        kotlinOptions.apiVersion = ktlin.majorV
        kotlinOptions.languageVersion = ktlin.majorV
    }
    kotlin {
        experimental {
            coroutines 'enable'
        }
    }
}

project("gamedex-app") {
    apply gradleFile('application.gradle')
    mainClassName = "com.gitlab.ykrasik.gamedex.Main"
    apply plugin: 'javafx-gradle-plugin'

    dependencies {
        compile project(":gamedex-common")
        compile project(":gamedex-persistence")

        fullDependency(":gamedex-provider-giantbomb")
        fullDependency(":gamedex-provider-igdb")

        compile slf4j.julBridge
        compile logback

        compile controlsFx
        compile jFoenix
        compile tornadoFx.core
        compile tornadoFx.controls

        compile diff
    }

    jfx {
//        verbose = true
        mainClass = mainClassName
        jfxMainAppJarName = "gamedex.jar"
        identifier = "faeb5e02-a70d-4f15-b09b-77022499cd18"
        vendor = "ykrasik"
//        bundler = "ALL" // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
        jvmProperties = ["-Xmx": javaMaxHeap]
        nativeReleaseVersion = version
        needShortcut = true
        needMenu = true
//        bundleArguments = [
//            // dont bundle JRE (not recommended, but increases build-size/-speed)
//            runtime: null
//        ]
        appName = "GameDex"
//        noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing
//        failOnError = false
        skipJNLP = true
        skipMainClassScanning = true

        // per default the outcome of the gradle "jarTask" will be used, set this to specify otherwise (like proguard-output)
//        alternativePathToJarFile = null // String
    }

    task customizeWindowsInstaller(type: Copy) {
        from 'src/main/deploy/package/windows/'
        into 'src/main/deploy/package/windows/'
        include 'gamedex.iss.template'
        rename { file -> 'gamedex.iss' }
        expand(version: version)
    }

    jfxNative {
        dependsOn customizeWindowsInstaller

        doLast {
            delete 'src/main/deploy/package/windows/gamedex.iss'
        }
    }
}

project("gamedex-common") {
    dependencies {
        compile typesafeConfig
        compile config4k

        compile guava
        compile reflections

        compile jodaTime

        compile(khttp) {
            exclude module: 'spek-api'
            exclude module: 'spek-junit-platform-engine'
        }

        compile jackson.core
        compile jackson.kotlin
        compile jackson.joda

        testCompile wiremock
        testCompile ktor.core
        testCompile ktor.netty
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task testSourcesJar(type: Jar, dependsOn: classes) {
        appendix 'testkit'
        classifier 'sources'
        from sourceSets.test.allSource
        exclude '**/*.jpg'
    }

    publishing {
        publications {
            main(MavenPublication) {
                from components.java
                artifact sourcesJar
            }
            test(MavenPublication) {
                artifactId 'gamedex-common-testkit'
                artifact testJar
                artifact testSourcesJar

                pom.withXml {
                    def dependencies = asNode().appendNode('dependencies')
                    configurations.testArtifacts.getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                        def dependency = dependencies.appendNode('dependency')
                        dependency.appendNode('groupId', it.moduleGroup)
                        dependency.appendNode('artifactId', it.moduleName)
                        dependency.appendNode('version', it.moduleVersion)
                    }
                }
            }
        }
    }
}

project("gamedex-persistence") {
    dependencies {
        fullDependency(":gamedex-common")
        compile h2
        compile exposed
    }
}

project("gamedex-provider-giantbomb") {
    dependencies {
        fullDependency(":gamedex-common")
    }
}

project("gamedex-provider-igdb") {
    dependencies {
        fullDependency(":gamedex-common")
    }
}

def gradleFile(String fileName) { [from: file("gradle/$fileName")] }