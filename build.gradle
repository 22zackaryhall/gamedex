buildscript {
    ext {
        kotlin_version = '1.1.2'
        ktlin = [:].with {
            v = '1.1.2'
            couroutinesVersion = '0.14'
            std = [group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: v]
            reflect = [group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: v]
            gradle = [group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: v]
            dokka = [group: 'org.jetbrains.dokka', name: 'dokka-gradle-plugin', version: '0.9.13']
            coroutinesCore = [group: 'org.jetbrains.kotlinx', name:'kotlinx-coroutines-core', version: couroutinesVersion]
            coroutinesJavaFx = [group: 'org.jetbrains.kotlinx', name:'kotlinx-coroutines-javafx', version: couroutinesVersion]
            delegate
        }

        groovy = [group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.10']

        guice = [:].with {
            v = '4.1.0'
            core = [group: 'com.google.inject', name: 'guice', version: v]
            multibindings = [group: 'com.google.inject.extensions', name: 'guice-multibindings', version: v]
            delegate
        }

        slf4j = [:].with {
            v = '1.7.25'
            api = [group: 'org.slf4j', name: 'slf4j-api', version: v]
            julBridge = [group: 'org.slf4j', name: 'jul-to-slf4j', version: v]
            delegate
        }
        logback = [group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3']

        config = [group: 'com.typesafe', name: 'config', version: '1.3.1']

        guava = [group: 'com.google.guava', name: 'guava', version: '21.0']
        commonsLang3 = [group: 'org.apache.commons', name: 'commons-lang3', version: '3.5']

        jodaTime = [group: 'joda-time', name: 'joda-time', version: '2.9.9']

        khttp = [group: 'com.github.jkcclemens', name: 'khttp', version: '-SNAPSHOT']
        ktor = [:].with {
            v = '0.3.0'
            core = [group: 'org.jetbrains.ktor', name: 'ktor-core', version: v]
            netty = [group: 'org.jetbrains.ktor', name: 'ktor-netty', version: v]
            delegate
        }
        wiremock = [group: 'com.github.tomakehurst', name: 'wiremock', version: '2.6.0']

        jackson = [:].with {
            v = '2.8.8'
            core = [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: v]
            kotlin = [group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: v]
            joda = [group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: v]
            delegate
        }

        h2 = [group: 'com.h2database', name: 'h2', version: '1.4.194']
        exposed = [group: 'org.jetbrains.exposed', name: 'exposed', version: '0.7.4']

        controlsFx = [group: 'org.controlsfx', name: 'controlsfx', version: '8.40.12']
        tornadoFx = [:].with {
            core = [group: 'no.tornado', name: 'tornadofx', version: '1.7.2']
            controls = [group: 'no.tornado', name: 'tornadofx-controls', version: '1.0.5']
            delegate
        }

        kotlinTest = [group: 'io.kotlintest', name: 'kotlintest', version: '2.0.0']
        junit = [group: 'junit', name: 'junit', version: '4.12']
        mockito = [:].with {
            core = [group: 'org.mockito', name: 'mockito-all', version: '1.10.19']
            kotlin = [group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.4.0']
            delegate
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath ktlin.gradle
        classpath ktlin.dokka
    }
}

allprojects {
    apply plugin: "java"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/kotlin/exposed" }
        maven { url "https://jitpack.io" }
        maven { url "http://dl.bintray.com/kotlin/ktor" }
//        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'

    configurations {
        testArtifacts.extendsFrom testRuntime
    }
    
    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }
    
    artifacts {
        testArtifacts testJar
    }
    
    dependencies {
        compile ktlin.std
        compile ktlin.reflect
        compile ktlin.coroutinesCore
        compile ktlin.coroutinesJavaFx

        compile slf4j.api

        compile guice.core
        compile guice.multibindings

        testCompile junit
        testCompile kotlinTest
        testCompile mockito.core
        testCompile mockito.kotlin
    }

    dokka {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
        processConfigurations = ['compile']
    }

    compileKotlin {
        kotlinOptions.jvmTarget= "1.8"
    }
    kotlin {
        experimental {
            coroutines 'enable'
        }
    }
}

project("gamedex-app") {
    apply plugin: "application"
    mainClassName = "com.gitlab.ykrasik.gamedex.Main"

    dependencies {
        compile project(":gamedex-common")
        compile project(":gamedex-persistence")

        compile project(":gamedex-provider-giantbomb")
        compile project(":gamedex-provider-igdb")

        compile slf4j.julBridge

        compile controlsFx
        compile tornadoFx.core
        compile tornadoFx.controls

        testCompile project(path: ":gamedex-provider-giantbomb", configuration: 'testArtifacts')
        testCompile project(path: ":gamedex-provider-igdb", configuration: 'testArtifacts')
    }
}

project("gamedex-common") {
    dependencies {
        compile groovy
        compile logback

        compile config

        compile guava
        compile commonsLang3

        compile jodaTime

        compile khttp

        compile jackson.core
        compile jackson.kotlin
        compile jackson.joda

        testCompile wiremock
        testCompile ktor.core
        testCompile ktor.netty
    }
}

project("gamedex-persistence") {
    dependencies {
        compile project(":gamedex-common")
        testCompile project(path: ":gamedex-common", configuration: 'testArtifacts')
        
        compile h2
        compile exposed
    }
}

project("gamedex-provider-giantbomb") {
    dependencies {
        compile project(":gamedex-common")
        testCompile project(path: ":gamedex-common", configuration: 'testArtifacts')
    }
}

project("gamedex-provider-igdb") {
    dependencies {
        compile project(":gamedex-common")
        testCompile project(path: ":gamedex-common", configuration: 'testArtifacts')
    }
}